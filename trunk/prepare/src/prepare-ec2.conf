#===============================================================================
# vim: set fileencoding=utf-8
#
# $LastChangedDate$
# $LastChangedRevision$
# $LastChangedBy$
# $HeadURL$
# $Id$
#===============================================================================

[global]
# Tag settings.
# Images *MUST* have these tags
requiredTags = ["Web"]
# Images *MUST* *NOT* have these tags
#hiddenTags = ["Hidden", "Panorama Source Images"]
hiddenTags = [ "Hidden" ]

# Where's the F-Spot photos.db stored?
# Default: $HOME/.gnome2/f-spot/photos.db
#dblocation = "/home/askwar/photos/photos.db"
#dblocation = "/usr/local/PennAve/pennave/prepare-mit-versions/pennave/src-prepare-auf-ec2/photos.db"
dblocation = "/root/prepare/photos.db"

### Where should EXIF Information be dumped to?
### Used by dump_exif.py
#exifPath = "/home/askwar/Programme/PennAve/scale/exif"

# Images are hosted on Amazon AWS S3. Specify a "bucket" name in which
# all the images are stored and also a "path" in that bucket.
# The complete URL will then look like this:
# http://s3.amazonaws.com/$aws_s3_bucket/$aws_s3_path/$img
# Or like this:
# http://$aws_s3_bucket.s3.amazonaws.com/$aws_s3_path/$img
aws_s3_bucket = "images.alexander.skwar.name"
aws_s3_path = "images"
# Additionally, prepare.py will need two environment variables
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY

# Specify bucket and prefix to a S3 storage, from where images are *read*
aws_s3_image_bucket = "bilder.alexander.skwar.name"
aws_s3_image_prefix = "public/Kategorien"

# gbs = {"aws_s3_bucket": "test.images.alexander.skwar.name", "aws_s3_path": "images", "aws_s3_access_key_id": "0C5GNE198PW7Y9SRJ5G2", "aws_s3_secret_access_key": "ETUqgOouvw74IjKl2HhLv9UubV0BEq5k5M9lJo9t"}

# Define a portion of the path to the image on the original harddisk, which will
# be stripped.
# On my system, images are stored under "/home/askwar/Desktop/My Pictures/Photos/Kategorien"
# On Amazon S3, everything starting from "Kategorien" is present. So the portion
# "/home/askwar/Desktop/My Pictures/Photos/Kategorien/" has to be stripped.
# Be sure to end the URL with a "/"!
img_path_prefix_strip = "/home/askwar/Desktop/My Pictures/Photos/Kategorien/"

# Define how prepare.py should log.
log.screen = False
log.error_file = '/usr/local/PennAve/pennave@nesi/prepare-mit-versions/pennave/pennave-prepare.log'
#log.error_file = '/home/askwar/Source/prepare/pennave-prepare.log'
#log.error_file = '/home/alexander/Programme/pennave/pennave-prepare.log'

# configure the size of the photos
mediumPhotoSize = (640,480)
#thumbnailPhotoSize = (120,80)
thumbnailPhotoSize = (144,108)
tinyPhotoSize = (32,32)

# In order to run prepare.py in parallel on many (virtual) machines,
# the number of defines can be defined here.
# If that's defined, this particular instance will NOT prepare _all_
# the images.
# Calculation used:
# ((instanceNumber-1) * (max(id) / instanceCount)) bis ((instanceNumber * (max(id) / instanceCount)) - 1)
#instanceCount = 5
# You'll also need to define the current run number of the instances
#instanceNumber = 1

# As an alternative, it's also possible to define a min. and max. ID.
# If that's set, only images in the given range will be processed.
# The calculation based on instanceCound and instanceNumber will then 
# NOT be done.
#processIds = (1, 65000)
processIds = (4956, 64957)

# EOF #
